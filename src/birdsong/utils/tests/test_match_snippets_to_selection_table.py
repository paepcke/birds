'''
Created on May 13, 2021

@author: paepcke
'''
import os
from pathlib import Path
import shutil
from tempfile import TemporaryDirectory
import tempfile
import unittest
import warnings

from birdsong.utils.match_snippets_to_selection_table import SnippetSelectionTableMapper
from birdsong.utils.match_snippets_to_selection_table import SelTblSnipsAssoc
from data_augmentation.list_png_metadata import PNGMetadataManipulator
from data_augmentation.utils import Utils, Interval


#*****8TEST_ALL = True
TEST_ALL = False

'''
The following are the correct results for matching test 28 test snippets at 
<proj-root>/src/birdsong/utils/tests/data/fld_snippets
to the selection table DS_AM01_20190711_170000.Table.1.selections.txt
in <proj-root>/src/birdsong/utils/tests/data/selection_tables

Each row below describes one of the output snippets that
are generated by test_whole_thing():

    <species>, <filename> <start-time> <end-time>
    
If all went well, the species in the snippets' metadata
key species' will contain <species>. And the files will
be in subdirectories of the temporary directory created
in test_whole_think(). Those subdirs will be named after
the species.
'''
snippet_matching_truth = {
    'AM01_20190711_170000_sw-start0_wcpa' : {   'end': 5.944272445820434,
                                                'species': 'wcpa',
                                                'start': 0.0},
    'AM01_20190711_170000_sw-start10'     : {   'end': 43.88544891640867,
                                                'species': 'noise',
                                                'start': 9.98452012383901},
    'AM01_20190711_170000_sw-start12'     : {   'end': 43.88544891640867,
                                                'species': 'noise',
                                                'start': 11.981424148606811},
    'AM01_20190711_170000_sw-start14'     : {   'end': 53.869969040247675,
                                                'species': 'noise',
                                                'start': 13.978328173374614},
    'AM01_20190711_170000_sw-start16'     : {   'end': 53.869969040247675,
                                                'species': 'noise',
                                                'start': 15.975232198142416},
    'AM01_20190711_170000_sw-start18'     : {   'end': 43.88544891640867,
                                                'species': 'noise',
                                                'start': 17.97213622291022},
    'AM01_20190711_170000_sw-start20'     : {   'end': 25.913312693498455,
                                                'species': 'noise',
                                                'start': 19.96904024767802},
    'AM01_20190711_170000_sw-start22_shwc': {  'end': 27.910216718266255,
                                               'species': 'shwc',
                                               'start': 21.96594427244582},
    'AM01_20190711_170000_sw-start24_shwc': {  'end': 29.907120743034056,
                                               'species': 'shwc',
                                               'start': 23.962848297213622},
    'AM01_20190711_170000_sw-start26_shwc': {  'end': 31.90402476780186,
                                               'species': 'shwc',
                                               'start': 25.959752321981426},
    'AM01_20190711_170000_sw-start26_unk1': {  'end': 31.90402476780186,
                                               'species': 'unk1',
                                               'start': 25.959752321981426},
    'AM01_20190711_170000_sw-start28'     : {  'end': 33.90092879256966,
                                               'species': 'shwc',
                                               'start': 27.956656346749227},
    'AM01_20190711_170000_sw-start28_unk1': {  'end': 33.90092879256966,
                                               'species': 'unk1',
                                               'start': 27.956656346749227},
    'AM01_20190711_170000_sw-start2_wcpa' : {  'end': 7.9411764705882355,
                                               'species': 'wcpa',
                                               'start': 1.996904024767802},
    'AM01_20190711_170000_sw-start30_shwc': {  'end': 35.89783281733746,
                                               'species': 'shwc',
                                               'start': 29.953560371517028},
    'AM01_20190711_170000_sw-start30_unk1': {  'end': 35.89783281733746,
                                               'species': 'unk1',
                                               'start': 29.953560371517028},
    'AM01_20190711_170000_sw-start30_wcpa': {  'end': 35.89783281733746,
                                               'species': 'wcpa',
                                               'start': 29.953560371517028},
    'AM01_20190711_170000_sw-start32'     : {  'end': 37.89473684210527,
                                               'species': 'unk1',
                                               'start': 31.950464396284833},
    'AM01_20190711_170000_sw-start34'     : {  'end': 39.89164086687306,
                                               'species': 'noise',
                                               'start': 33.94736842105263},
    'AM01_20190711_170000_sw-start36'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 35.94427244582044},
    'AM01_20190711_170000_sw-start38'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 37.94117647058824},
    'AM01_20190711_170000_sw-start40'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 39.93808049535604},
    'AM01_20190711_170000_sw-start42'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 41.93498452012384},
    'AM01_20190711_170000_sw-start44'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 43.93188854489164},
    'AM01_20190711_170000_sw-start46'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 45.92879256965944},
    'AM01_20190711_170000_sw-start48'     : {  'end': 53.869969040247675,
                                               'species': 'noise',
                                               'start': 47.925696594427244},
    'AM01_20190711_170000_sw-start4_wcpa' : {  'end': 9.938080495356038,
                                               'species': 'wcpa',
                                               'start': 3.993808049535604},
    'AM01_20190711_170000_sw-start50'     : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 49.92260061919505},
    'AM01_20190711_170000_sw-start52'     : {  'end': 57.863777089783284,
                                               'species': 'noise',
                                               'start': 51.91950464396285},
    'AM01_20190711_170000_sw-start54'     : {  'end': 59.860681114551085,
                                               'species': 'wcpa',
                                               'start': 53.916408668730654},
    'AM01_20190711_170000_sw-start6'      : {  'end': 43.88544891640867,
                                               'species': 'noise',
                                               'start': 5.9907120743034055},
    'AM01_20190711_170000_sw-start8'      : {  'end': 53.869969040247675,
                                               'species': 'noise',
                                               'start': 7.987616099071208}
    }


class TestSnippetMatcher(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.cur_dir        = os.path.dirname(__file__)
        cls.data_dir       = os.path.join(cls.cur_dir, 'data')
        cls.sel_tbl_dir    = os.path.join(cls.data_dir, 'selection_tables')
        cls.sel_tbl_path1  = os.path.join(cls.sel_tbl_dir, 
                                          'DS_AM01_20190711_170000.Table.1.selections.txt')
        cls.sel_tbl_path2  = os.path.join(cls.sel_tbl_dir, 
                                          'DS_AM01_20190712_050000.Table.1.selections.txt')
        cls.tst_snips_dir = os.path.join(cls.data_dir, 'fld_snippets')

        # Get start-time sorted list of dicts,
        # each dict containing info of one selection
        # table:
        cls.sel_tbl_lst1    = Utils.read_raven_selection_table(cls.sel_tbl_path1)
        cls.sel_tbl_lst2    = Utils.read_raven_selection_table(cls.sel_tbl_path2)
        
        # For testing SelTblSnipsAssoc iteration:
        cls.tbl_snips_assoc_iter_test_dir = os.path.join(cls.data_dir, 
                                                         'tbl_snippet_assoc_iter_data')
        
        cls.sel1 = {
            'Begin Time (s)' : 10,
            'End Time (s)'   : 20,
            'species'        : 'dog',
            'mix'            : None
            }
        
        cls.sel2 = {
            'Begin Time (s)' : 25,
            'End Time (s)'   : 30,
            'species'        : 'dog',
            'mix'            : ['species1']
            }
        
        cls.sel3 = {
            'Begin Time (s)' : 30,
            'End Time (s)'   : 40,
            'species'        : 'cat',
            'mix'            : ['species1']
            }
        cls.sel4 = {
            'Begin Time (s)' : 50,
            'End Time (s)'   : 60,
            'species'        : 'dog',
            'mix'            : ['species1', 'species2']
            }
        
        # Case 1: left of all sels:
        cls.iv1 = Interval(5,6)
        # Case 2 end reaches into sel1:
        cls.iv2 = Interval(6,12)
        # Case 3 entirely enclosed in sel1:
        cls.iv3 = Interval(12,16)
        # Case 4: only start is in sel1:
        cls.iv4 = Interval(14,22)
        # Case 5: in no selection:
        cls.iv5 = Interval(22,24)
        # Case 6: straddles two selections sel 2/3:
        cls.iv6 = Interval(28,35)
        # Case 7: to the right of all sels (sel 4):
        cls.iv7 = Interval(65,70)
        
        cls.sels = [cls.sel1, cls.sel2, cls.sel3, cls.sel4]
        
        warnings.filterwarnings("ignore",
                                category=ResourceWarning,
                                         message='Implicitly cleaning'
                                )
        warnings.filterwarnings("ignore",
                                category=ResourceWarning,
                                         message='unclosed file'
                                )

    #------------------------------------
    # setUP 
    #-------------------

    def setUp(self):
        self.tmp_outdir_obj = TemporaryDirectory(dir='/tmp', 
                                                 prefix='sel_tbl_matching')
        self.tmp_outdir = self.tmp_outdir_obj.name
        # self.mapper = SnippetSelectionTableMapper(
        #    self.sel_tbl_path1,
        #    self.tst_snips_dir, 
        #    self.tmp_outdir
        #    )
        self.mapper = SnippetSelectionTableMapper(None,None,None,unittesting=True)

    #------------------------------------
    # tearDown 
    #-------------------

    def tearDown(self):
        # Destroy the out directory
        try:
            shutil.rmtree(self.tmp_outdir)
        except Exception as _e:
            pass

# ----------------------- Tests ------------

    @unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_create_spectro_gen_for_sel_tbls(self):
        
        # Given one snippet directory path, and 
        # directory with Raven selection tables, 
        # create a dict whose keys are recording
        # IDs gleaned from the file names or recordings
        # and selection tables. Each value is one 
        # object, and instance of SelTblSnipsAssoc.
        # It is an iterator that provides paths to 
        # snippets that are covered by the table.
        
        # Get dict:
        #   {<recording-ID>  : SelTblSnipsAssoc-instance}
        tbl_snips_mapping = self.mapper.create_snips_gen_for_sel_tbls(
            self.tst_snips_dir,
            self.sel_tbl_dir)
        
        # Ensure that there is an entry in the dict
        # for both of our two test selection tables:
        
        self.assertEqual(len(tbl_snips_mapping), 2)

        rec_id1 = self.mapper.extract_recording_id(self.sel_tbl_path1)
        rec_id2 = self.mapper.extract_recording_id(self.sel_tbl_path2)
        
        self.assertSetEqual(set(list(tbl_snips_mapping.keys())), 
                            set([rec_id1, rec_id2])
                            )

    #------------------------------------
    # test_match_snippet
    #-------------------

    @unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_match_snippet(self):

        # Get list of dicts; each dict will contain
        # info from one row in the selection table
        # at self.sel_tbl_path1:
        
        sel_dicts = Utils.read_raven_selection_table(self.sel_tbl_path1)
        
        # The list is expected to look like this:
        #
        #      [{'Selection': '5',
        #         'View': 'Spectrogram 1',
        #         'Channel': '1',
        #         'Begin Time (s)': 0.014506764,
        #         'End Time (s)': 4.656671354,
        #         'Low Freq (Hz)': 345.6,
        #         'High Freq (Hz)': 22050.0,
        #         'Delta Time (s)': '4.6422',
        #         'species': 'no bird',
        #         'type': '',
        #         'number': '',
        #         'mix': [],
        #         'time_interval': {'low_val': 0.014506764,
        #         'high_val': 4.656671354},
        #         'freq_interval': {'low_val': 345.6,
        #                           'high_val': 22050.0}
        #       },
        #      ...
        #      ]    
        #
        # and there should be as many entries as there
        # are rows in the table:
        
        with open(self.sel_tbl_path1, 'r') as fd:
            all_lines = fd.readlines()
            # The '-1' subtracts the sel table's
            # column header line:
            self.assertEqual(len(sel_dicts), len(all_lines)-1)

        # Create a dict:
        #    {<recording-id>  : SelectionTblSnipsAssoc-instance}
        #
        # Each SelectionTblSnipsAssoc instance is a generator of snippets
        # from one recording. The recording-id is the part of 
        # field recording and selection table file names like:
        #    AM01_20190712_050000

        rec_id_to_sel_tbl_snips_gens = self.mapper.create_snips_gen_for_sel_tbls(
            self.tst_snips_dir, 
            self.sel_tbl_dir)

        # We have two test select tables, so the 
        # number of SelectionTblSnipsAssoc instances
        # should match:
        
        num_sel_tbls = len(os.listdir(self.sel_tbl_dir))
        self.assertEqual(len(rec_id_to_sel_tbl_snips_gens),
                         num_sel_tbls)

        # Examine the rec-id-->snippet-generator for 
        # recording AM01_20190711_170000: 
        assoc170k = rec_id_to_sel_tbl_snips_gens['AM01_20190711_170000']
        
        self.assertEqual(assoc170k.rec_id, 'AM01_20190711_170000')
        self.assertEqual(assoc170k.snip_dir, self.tst_snips_dir)
        
        # Get number of snippets with recording id 
        # of 'AM01_20190711_170000' that we have among 
        # the test snippets:
        snip_fnames = os.listdir(assoc170k.snip_dir)
        snips_fname_filter = filter(self.mapper.extract_recording_id, snip_fnames)
        snips_list = list(snips_fname_filter)
        num_tst_snips  = len(snips_list)
        
        num_snips_in_generator = len(list(assoc170k))
        self.assertEqual(num_snips_in_generator, num_tst_snips)

    #------------------------------------
    # test_snips_iterator 
    #-------------------
    
    @unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_snips_iterator(self):
        
        sel_snip_assoc = SelTblSnipsAssoc(self.sel_tbl_path1, 
                                          self.tbl_snips_assoc_iter_test_dir)
        snip_nums = []
        for snip_md in sel_snip_assoc:
            # Get <loooong-dir-path>/AM01_20190711_170000_sw-start4.png
            # Get the integer after 'start':
            snip_path = snip_md['snip_path']
            start_n = Path(snip_path).stem.split('-')[1]
            n       = int(start_n[len('start'):])
            snip_nums.append(n)
        self.assertListEqual(snip_nums, [0,2,4,6,5])

    #------------------------------------
    # test_extract_recording_id 
    #-------------------
    
    @unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_extract_recording_id(self):
        
        tst_path = '/foo/bar/AM01_20190719_063242.png'
        rec_id = self.mapper.extract_recording_id(tst_path)
        self.assertEqual(rec_id, 'AM01_20190719_063242')
        
        tst_path = '/foo/barAM01_20190719_063242/fum.png'
        rec_id = self.mapper.extract_recording_id(tst_path)
        self.assertTrue(rec_id is None)

    #------------------------------------
    # test_interval_matching 
    #-------------------
    
    @unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_interval_matching(self):
        
        # Case 1: left of all sels:
        self.assertIsNone(self.mapper.find_covering_sel(self.sels, self.iv1))
        # Case 2 end reaches into sel1:
        self.assertDictEqual(self.mapper.find_covering_sel(self.sels, self.iv2),
                             self.sel1)
        # Case 3 entirely enclosed in sel1:
        self.assertDictEqual(self.mapper.find_covering_sel(self.sels, self.iv3),
                             self.sel1)
        # Case 4 start is in sel
        self.assertDictEqual(self.mapper.find_covering_sel(self.sels, self.iv4),
                             self.sel1)
        # Case 6: straddling multiple selections (sel2 and sel3):
        res_sel_dict = self.mapper.find_covering_sel(self.sels, self.iv6)
        
        truth_sel = self.sel2.copy()
        truth_sel['mix'] = list(set(['cat', 'species1']))
        
        self.assertDictEqual(res_sel_dict, truth_sel)
        
        # Case 7: Interval entirely to the right of all sels:
        self.assertIsNone(self.mapper.find_covering_sel(self.sels, self.iv7))
        

    #------------------------------------
    # test_whole_thing
    #-------------------

    #*********@unittest.skipIf(TEST_ALL != True, 'skipping temporarily')
    def test_whole_thing(self):
        # Integration test:

        with tempfile.TemporaryDirectory(dir='/tmp', prefix='snip_matching') as tmp_dir_name:
            _mapper = SnippetSelectionTableMapper(
                self.sel_tbl_dir,
                self.tst_snips_dir,
                tmp_dir_name
                )
            
            #for fpath, metadata in PNGMetadataManipulator.metadata_list(tmp_dir_name):
            #    print(fpath, metadata)
            
            # Get a list of metadata from all snippets:
            #all_snip_metadata = list(PNGMetadataManipulator.metadata_list(tmp_dir_name))
            # Sort by time:
            #sorted_md = sorted(all_snip_metadata, 
            #                   key=lambda one_fnm_dict: float(one_fnm_dict[1]['start_time(secs)']))

            #for (fpath, md_dict) in sorted_md:
            #    fname = Path(fpath).stem
            #    print(f"{md_dict['species']} {fname}    : {md_dict['start_time(secs)']}")
            
            #print(sorted_md)
            self.check_whole_thing_outcome(tmp_dir_name)
                
            
# ---------------------- Utilities -----------------

    #------------------------------------
    # check_whole_thing_outcome 
    #-------------------
    
    def check_whole_thing_outcome(self, root_dir):

        # Set of species represented in the 
        # selections:
        all_species = {truth_dict['species']
                       for truth_dict
                       in snippet_matching_truth.values()
                       }
        
        # First: does the given dir include one subdir
        # for each species in table snippet_matching_truth?

        subdirs = os.listdir(root_dir)
        self.assertEqual(len(all_species), len(subdirs))
        
        self.assertSetEqual(set(subdirs), all_species)

        # Get a list of metadata from all snippets:
        # We will receive:
        #    [(<absolute-snippet-path>, <metadata>),
        #     (<absolute-snippet-path>, <metadata>),
        #       ...
        #    ]
        all_snip_metadata = list(PNGMetadataManipulator.metadata_list(root_dir))
        # Get dict
        #   {<snippet-file-name> : <metadata>,
        #    <snippet-file-name> : <metadata>,
        #         ...
        #   }
        snip_md_dict = {Path(snip_path).stem : metadata_dict
                        for (snip_path, metadata_dict)
                        in all_snip_metadata
                        }
        # Check all the values against the truth:
        for fname in snip_md_dict.keys():
            start_time_to_test = snippet_matching_truth[fname]['start']
            start_time_truth   = float(snip_md_dict[fname]['start_time(secs)'])
            self.assertEqual(start_time_to_test, start_time_truth)
            
            end_time_to_test = snippet_matching_truth[fname]['end']
            end_time_truth   = float(snip_md_dict[fname]['end_time(secs)'])
            self.assertEqual(end_time_to_test, end_time_truth)
            
            species_to_test = snippet_matching_truth[fname]['species']
            species_truth   = snip_md_dict[fname]['species']
            self.assertEqual(species_to_test, species_truth)


        print('foo')
        


# ---------------------- Main ------------
if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()